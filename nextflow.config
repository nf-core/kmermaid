/*
 * -------------------------------------------------
 *  nf-core/kmermaid Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {
  // Pipeline Options
  // Many different input modalities can be provided at once
  read_pairs = false
  read_singles = false
  csv_pairs = false
  csv_singles = false
  fastas = false
  protein_fastas = false
  sra = false

  input = false

  // Parsing 10x bam files
  tenx_tgz = false
  tenx_tags = "CB,CR,CY,XC,UB,UR,UY,AN,TR,XM,XB,RG,GN,GX,TX,NH,HI,AS,nM,RE,MM,pa,xf,fb,fr,fq,fx"
  tenx_cell_barcode_pattern = '(CB|XC):Z:([ACGT]+)(\\-1)?'
  tenx_molecular_barcode_pattern = '(UB|XB|XM):Z:([ACGT]+)'
  tenx_min_umi_per_cell = 1000

  // Creating sketches
  molecules ='dna,protein,dayhoff'
  ksizes = '21,33,51'
  // Track abundance by default
  track_abundance = true
  // Number of hashes from each sample
  sketch_num_hashes = false
  sketch_num_hashes_log2 = false
  sketch_scaled = false
  sketch_scaled_log2 = false
  skip_sig_merge = false

  // Comparing sketches
  skip_compare = false

  // Computing sketches
  skip_compute = false

  skip_trimming = false

  // translate options
  translate_peptide_ksize = 8
  translate_peptide_molecule = 'protein'
  translate_jaccard_threshold = 0.05
  reference_proteome_fasta = false
  bloomfilter_tablesize = '1e8'
  // Saving the translate results for each dataset makes it take extra long
  // Recommended for debugging purposes only
  save_translate_csv = false
  save_translate_json = false


  // Ribosomal RNA removal
  remove_ribo_rna = false
  save_non_rrna_reads = false
  rrna_database_manifest = "${baseDir}/assets/rrna-db-defaults.txt"

  // ska options
  split_kmer = false
  subsample = false

  // 10x options
  save_fastas = "fastas"
  tenx_min_umi_per_cell = '0'
  write_barcode_meta_csv = false
  bam = false

  // 10x optional input parameters set using the below pattern
  // https://github.com/nextflow-io/patterns/blob/master/docs/optional-input.adoc
  barcodes_file = false
  rename_10x_barcodes = false

  // Variables for testing
  input_paths = false
  fasta_paths = false
  protein_fasta_paths = false

  // QC to skip
  skip_multiqc = false

  // Boilerplate options
  outdir = './results'
  name = false
  publish_dir_mode = 'copy'
  multiqc_config = "$baseDir/assets/multiqc_config.yaml"
  email = false
  email_on_fail = false
  max_multiqc_email_size = 25.MB
  plaintext_email = false
  monochrome_logs = false
  help = false
  tracedir = "${params.outdir}/pipeline_info"
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h

}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'nfcore/kmermaid:dev'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
  conda { process.conda = "$projectDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    // Avoid this error:
    //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
    // once this is established and works well, nextflow might implement this behavior as new default.
    docker.runOptions = "-u \$(id -u):\$(id -g)"
    docker.temp = "auto"
  }
    singularity {
    singularity.enabled = true
    singularity.autoMounts = true
  }
  podman {
    podman.enabled = true
  }
  test { includeConfig 'conf/test.config' }
  test_full { includeConfig 'conf/test_full.config' }
  test_ska { includeConfig 'conf/test_ska.config' }
  test_bam { includeConfig 'conf/test_bam.config' }
  test_fastas { includeConfig 'conf/test_fastas.config' }
  test_protein_fastas { includeConfig 'conf/test_protein_fastas.config' }
  test_remove_ribo { includeConfig 'conf/test_remove_ribo.config' }
  test_sig_merge { includeConfig 'conf/test_sig_merge.config' }
  test_tenx_tgz { includeConfig 'conf/test_tenx_tgz.config' }
  test_translate { includeConfig 'conf/test_translate.config' }
  test_translate_bam { includeConfig 'conf/test_translate_bam.config' }
}


// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER = "/.Rprofile"
  R_ENVIRON_USER = "/.Renviron"
}
// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'nf-core/kmermaid'
  author = 'Olga Botvinnik'
  homePage = 'https://github.com/nf-core/kmermaid'
  description = 'Compare DNA/RNA/protein sequences on k-mer content'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.11.0-edge'
  version = '0.1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
