/*
 * -------------------------------------------------
 *  nf-core/kmermaid Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
  igenomes_base = 's3://ngi-igenomes/igenomes/'
  // TODO nf-core: Check the defaults for all processes
  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 7.GB * task.attempt, 'memory' ) }
  time = { check_max( 4.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate' }
  maxRetries = 3
  maxErrors = '-1'

  withLabel: low_memory {
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  }
  withLabel: mid_memory {
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 24.h * task.attempt, 'time' ) }
  }
  withLabel: high_memory {
    cpus = { check_max (10, 'cpus')}
    memory = { check_max( 80.GB * task.attempt, 'memory' ) }
    time = { check_max( 48.h * task.attempt, 'time' ) }
  }
  withName: 'multiqc|get_software_versions' {
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
    cache = false
  }

  // Process-specific resource requirements
  withName: 'peptide_bloom_filter' {
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    errorStrategy = 'terminate'
  }
  withName: 'extract_coding' {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { check_max( 48.h * task.attempt, 'time' ) }
  }

  withName: sourmash_compare_sketches {
    memory = { check_max( 64.GB * task.attempt, 'memory') }
    cpus = 1
  }
  withName: sourmash_compute_sketch_fastx_nucleotide {
    memory = { check_max( 4.GB * task.attempt, 'memory') }
    cpus = 1
  }
  withName: sourmash_compute_sketch_fastx_peptide {
    memory = { check_max( 4.GB * task.attempt, 'memory') }
    cpus = 1
  }
  withName: bam2fasta {
    memory = { check_max( 64.GB * task.attempt, 'memory') }
    cpus = 2
  }
  withName:get_software_versions {
    cache = false
  }

}
