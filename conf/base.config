/*
 * -------------------------------------------------
 *  nf-core/kmermaid Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {

  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 16.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate' }
  maxRetries = 3
  maxErrors = '-1'

  // Process-specific resource requirements
  // NOTE - Only one of the labels below are used in the fastqc process in the main script.
  //        If possible, it would be nice to keep the same label naming convention when
  //        adding in your processes.
  withLabel: cpus_2 {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
  }
  withLabel: low_memory {
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  }
  withLabel: low_memory_long {
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { check_max( 96.h * task.attempt, 'time' ) }
  }
  withLabel: mid_memory {
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 24.h * task.attempt, 'time' ) }
  }
  withLabel: mid_memory_long {
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 96.h * task.attempt, 'time' ) }
  }
  withLabel: high_memory {
    cpus = { check_max (10, 'cpus')}
    memory = { check_max( 80.GB * task.attempt, 'memory' ) }
    time = { check_max( 48.h * task.attempt, 'time' ) }
  }
  withLabel: high_memory_long {
    cpus = { check_max (10, 'cpus')}
    memory = { check_max( 80.GB * task.attempt, 'memory' ) }
    time = { check_max( 96.h * task.attempt, 'time' ) }
  }

  withName: 'multiqc|get_software_versions' {
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
    errorStrategy = "ignore"
    cache = false
  }
  withName: 'sourmash_compute_sketch_fastx_nucleotide|sourmash_compute_sketch_fastx_peptide' {
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { check_max( 96.h * task.attempt, 'time' ) }
    cpus = { check_max (1, 'cpus')}
  }
  withName: 'translate' {
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 96.h * task.attempt, 'time' ) }
    cpus = { check_max (1, 'cpus')}
  }
  withLabel: mid_cpu {
    memory = { check_max( 16.GB * task.attempt, 'memory') }
    cpus = { check_max( 8 * task.attempt, 'cpus' ) }
  }

}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
}